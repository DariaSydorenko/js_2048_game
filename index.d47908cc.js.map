{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        const oldState = JSON.parse(JSON.stringify(this.initialState));\n        for(let y = 0; y < this.initialState.length; y++){\n            for(let x = 1; x < this.initialState.length; x++)if (this.initialState[y][x] !== 0) {\n                const numValue = this.initialState[y][x];\n                for(let index = x - 1; index >= 0; index--){\n                    if (numValue === this.initialState[y][index]) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index] = numValue * 2;\n                        this.score += numValue * 2;\n                        break;\n                    }\n                    if (this.initialState[y][index] !== 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index + 1] = numValue;\n                        break;\n                    }\n                    if (index === 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index] = numValue;\n                    }\n                }\n            }\n        }\n        if (JSON.stringify(oldState) !== JSON.stringify(this.initialState) && this.hasValue(0)) this.generateTwoOrFour();\n    }\n    moveRight() {\n        const oldState = JSON.parse(JSON.stringify(this.initialState));\n        for(let y = 0; y < this.initialState.length; y++){\n            for(let x = this.initialState.length - 2; x >= 0; x--)if (this.initialState[y][x] !== 0) {\n                const numValue = this.initialState[y][x];\n                for(let index = x + 1; index < this.initialState.length; index++){\n                    if (numValue === this.initialState[y][index]) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index] = numValue * 2;\n                        this.score += numValue * 2;\n                        break;\n                    }\n                    if (this.initialState[y][index] !== 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index - 1] = numValue;\n                        break;\n                    }\n                    if (index === this.initialState.length - 1) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[y][index] = numValue;\n                    }\n                }\n            }\n        }\n        if (JSON.stringify(oldState) !== JSON.stringify(this.initialState) && this.hasValue(0)) this.generateTwoOrFour();\n    }\n    moveUp() {\n        const oldState = JSON.parse(JSON.stringify(this.initialState));\n        for(let x = 0; x < this.initialState.length; x++){\n            for(let y = 1; y < this.initialState.length; y++)if (this.initialState[y][x] !== 0) {\n                const numValue = this.initialState[y][x];\n                for(let index = y - 1; index >= 0; index--){\n                    if (numValue === this.initialState[index][x]) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index][x] = numValue * 2;\n                        this.score += numValue * 2;\n                        break;\n                    }\n                    if (this.initialState[index][x] !== 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index + 1][x] = numValue;\n                        break;\n                    }\n                    if (index === 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index][x] = numValue;\n                    }\n                }\n            }\n        }\n        if (JSON.stringify(oldState) !== JSON.stringify(this.initialState) && this.hasValue(0)) this.generateTwoOrFour();\n    }\n    moveDown() {\n        const oldState = JSON.parse(JSON.stringify(this.initialState));\n        for(let x = 0; x < this.initialState.length; x++){\n            for(let y = this.initialState.length - 2; y >= 0; y--)if (this.initialState[y][x] !== 0) {\n                const numValue = this.initialState[y][x];\n                for(let index = y + 1; index < this.initialState.length; index++){\n                    if (numValue === this.initialState[index][x]) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index][x] = numValue * 2;\n                        this.score += numValue * 2;\n                        break;\n                    }\n                    if (this.initialState[index][x] !== 0) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index - 1][x] = numValue;\n                        break;\n                    }\n                    if (index === this.initialState.length - 1) {\n                        this.initialState[y][x] = 0;\n                        this.initialState[index][x] = numValue;\n                    }\n                }\n            }\n        }\n        if (JSON.stringify(oldState) !== JSON.stringify(this.initialState) && this.hasValue(0)) this.generateTwoOrFour();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.status === \"playing\") {\n            if (this.hasValue(2048)) {\n                this.status = \"win\";\n                return this.status;\n            }\n            if (!this.hasValue(0)) {\n                for(let y = 0; y < this.initialState.length; y++)for(let x = 0; x < this.initialState[y].length; x++){\n                    const up = y < this.initialState.length - 2 ? this.initialState[y + 1][x] : null;\n                    const down = y >= 1 ? this.initialState[y - 1][x] : null;\n                    const right = x < this.initialState.length - 2 ? this.initialState[y][x + 1] : null;\n                    const left = x >= 1 ? this.initialState[y][x - 1] : null;\n                    if (this.initialState[y][x] === up || this.initialState[y][x] === down || this.initialState[y][x] === right || this.initialState[y][x] === left) return this.status;\n                }\n                this.status = \"lose\";\n            }\n        }\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        if (this.initialState.every((row)=>row.every((item)=>item === 0))) {\n            for(let i = 0; i <= 1; i++)if (this.hasValue(0)) this.generateTwoOrFour();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n    }\n    generateTwoOrFour() {\n        const row = Math.floor(Math.random() * this.initialState.length);\n        const col = Math.floor(Math.random() * this.initialState[0].length);\n        const num = Math.random() < 0.9 ? 2 : 4;\n        if (this.initialState[row][col] === 0) this.initialState[row][col] = num;\n        else this.generateTwoOrFour();\n    }\n    colorCells(board) {\n        for(let y = 0; y < this.initialState.length; y++){\n            const row = board.rows[y];\n            for(let x = 0; x < this.initialState[0].length; x++){\n                const cell = row.cells[x];\n                cell.className = cell.className.split(\" \").filter((className)=>!className.startsWith(\"field-cell--\")).join(\" \");\n                if (this.initialState[y][x] !== 0) {\n                    cell.classList.add(`field-cell--${this.initialState[y][x]}`);\n                    cell.textContent = `${this.initialState[y][x]}`;\n                } else cell.textContent = \"\";\n            }\n        }\n    }\n    hasValue(value) {\n        for(let y = 0; y < this.initialState.length; y++)for(let x = 0; x < this.initialState[y].length; x++){\n            if (this.initialState[y][x] === value) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$page = document.querySelector(\".page\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$board = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n// eslint-disable-next-line no-shadow\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (event)=>{\n    event.preventDefault();\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$game.colorCells($09e991522ca7e64e$var$board);\n    } else {\n        if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        if (!$09e991522ca7e64e$var$messageLose.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.colorCells($09e991522ca7e64e$var$board);\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n    $09e991522ca7e64e$var$button.blur();\n});\n// eslint-disable-next-line no-shadow\n$09e991522ca7e64e$var$page.addEventListener(\"keydown\", (event)=>{\n    if (event.key.startsWith(\"Arrow\") && event.repeat === false) {\n        event.preventDefault();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n            if (event.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n            else if (event.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n            else if (event.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n            else if (event.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$game.colorCells($09e991522ca7e64e$var$board);\n            $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n            if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n            if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        }\n    }\n});\n\n\n//# sourceMappingURL=index.d47908cc.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst page = document.querySelector('.page');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst board = document.querySelector('.game-field');\nconst score = document.querySelector('.game-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\n// eslint-disable-next-line no-shadow\nbutton.addEventListener('click', (event) => {\n  event.preventDefault();\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n\n    game.start();\n    game.colorCells(board);\n  } else {\n    if (!messageWin.classList.contains('hidden')) {\n      messageWin.classList.add('hidden');\n    }\n\n    if (!messageLose.classList.contains('hidden')) {\n      messageLose.classList.add('hidden');\n    }\n\n    button.textContent = 'Start';\n    button.classList.remove('restart');\n    button.classList.add('start');\n    messageStart.classList.remove('hidden');\n\n    game.restart();\n    game.colorCells(board);\n    score.textContent = game.getScore();\n  }\n\n  button.blur();\n});\n\n// eslint-disable-next-line no-shadow\npage.addEventListener('keydown', (event) => {\n  if (event.key.startsWith('Arrow') && event.repeat === false) {\n    event.preventDefault();\n\n    if (game.getStatus() === 'playing') {\n      if (event.key === 'ArrowRight') {\n        game.moveRight();\n      } else if (event.key === 'ArrowLeft') {\n        game.moveLeft();\n      } else if (event.key === 'ArrowUp') {\n        game.moveUp();\n      } else if (event.key === 'ArrowDown') {\n        game.moveDown();\n      }\n\n      game.colorCells(board);\n\n      score.textContent = game.getScore();\n\n      if (game.getStatus() === 'win') {\n        messageWin.classList.remove('hidden');\n      }\n\n      if (game.getStatus() === 'lose') {\n        messageLose.classList.remove('hidden');\n      }\n    }\n  }\n});\n","'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]]) {\n    this.initialState = initialState;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const oldState = JSON.parse(JSON.stringify(this.initialState));\n\n    for (let y = 0; y < this.initialState.length; y++) {\n      for (let x = 1; x < this.initialState.length; x++) {\n        if (this.initialState[y][x] !== 0) {\n          const numValue = this.initialState[y][x];\n\n          for (let index = x - 1; index >= 0; index--) {\n            if (numValue === this.initialState[y][index]) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index] = numValue * 2;\n              this.score += numValue * 2;\n\n              break;\n            }\n\n            if (this.initialState[y][index] !== 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index + 1] = numValue;\n\n              break;\n            }\n\n            if (index === 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index] = numValue;\n            }\n          }\n        }\n      }\n    }\n\n    if (JSON.stringify(oldState) !== JSON.stringify(this.initialState)\n      && this.hasValue(0)) {\n      this.generateTwoOrFour();\n    }\n  }\n\n  moveRight() {\n    const oldState = JSON.parse(JSON.stringify(this.initialState));\n\n    for (let y = 0; y < this.initialState.length; y++) {\n      for (let x = this.initialState.length - 2; x >= 0; x--) {\n        if (this.initialState[y][x] !== 0) {\n          const numValue = this.initialState[y][x];\n\n          for (let index = x + 1; index < this.initialState.length; index++) {\n            if (numValue === this.initialState[y][index]) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index] = numValue * 2;\n              this.score += numValue * 2;\n\n              break;\n            }\n\n            if (this.initialState[y][index] !== 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index - 1] = numValue;\n\n              break;\n            }\n\n            if (index === this.initialState.length - 1) {\n              this.initialState[y][x] = 0;\n              this.initialState[y][index] = numValue;\n            }\n          }\n        }\n      }\n    }\n\n    if (JSON.stringify(oldState) !== JSON.stringify(this.initialState)\n      && this.hasValue(0)) {\n      this.generateTwoOrFour();\n    }\n  }\n\n  moveUp() {\n    const oldState = JSON.parse(JSON.stringify(this.initialState));\n\n    for (let x = 0; x < this.initialState.length; x++) {\n      for (let y = 1; y < this.initialState.length; y++) {\n        if (this.initialState[y][x] !== 0) {\n          const numValue = this.initialState[y][x];\n\n          for (let index = y - 1; index >= 0; index--) {\n            if (numValue === this.initialState[index][x]) {\n              this.initialState[y][x] = 0;\n              this.initialState[index][x] = numValue * 2;\n              this.score += numValue * 2;\n\n              break;\n            }\n\n            if (this.initialState[index][x] !== 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[index + 1][x] = numValue;\n\n              break;\n            }\n\n            if (index === 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[index][x] = numValue;\n            }\n          }\n        }\n      }\n    }\n\n    if (JSON.stringify(oldState) !== JSON.stringify(this.initialState)\n      && this.hasValue(0)) {\n      this.generateTwoOrFour();\n    }\n  }\n\n  moveDown() {\n    const oldState = JSON.parse(JSON.stringify(this.initialState));\n\n    for (let x = 0; x < this.initialState.length; x++) {\n      for (let y = this.initialState.length - 2; y >= 0; y--) {\n        if (this.initialState[y][x] !== 0) {\n          const numValue = this.initialState[y][x];\n\n          for (let index = y + 1; index < this.initialState.length; index++) {\n            if (numValue === this.initialState[index][x]) {\n              this.initialState[y][x] = 0;\n              this.initialState[index][x] = numValue * 2;\n              this.score += numValue * 2;\n\n              break;\n            }\n\n            if (this.initialState[index][x] !== 0) {\n              this.initialState[y][x] = 0;\n              this.initialState[index - 1][x] = numValue;\n\n              break;\n            }\n\n            if (index === this.initialState.length - 1) {\n              this.initialState[y][x] = 0;\n              this.initialState[index][x] = numValue;\n            }\n          }\n        }\n      }\n    }\n\n    if (JSON.stringify(oldState) !== JSON.stringify(this.initialState)\n      && this.hasValue(0)) {\n      this.generateTwoOrFour();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.status === 'playing') {\n      if (this.hasValue(2048)) {\n        this.status = 'win';\n\n        return this.status;\n      }\n\n      if (!this.hasValue(0)) {\n        for (let y = 0; y < this.initialState.length; y++) {\n          for (let x = 0; x < this.initialState[y].length; x++) {\n            const up = y < this.initialState.length - 2\n              ? this.initialState[y + 1][x]\n              : null;\n            const down = y >= 1\n              ? this.initialState[y - 1][x]\n              : null;\n            const right = x < this.initialState.length - 2\n              ? this.initialState[y][x + 1]\n              : null;\n            const left = x >= 1\n              ? this.initialState[y][x - 1]\n              : null;\n\n            if (this.initialState[y][x] === up\n              || this.initialState[y][x] === down\n              || this.initialState[y][x] === right\n              || this.initialState[y][x] === left) {\n              return this.status;\n            }\n          }\n        }\n        this.status = 'lose';\n      }\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n\n    if (this.initialState.every(row =>\n      row.every(item => item === 0))) {\n      for (let i = 0; i <= 1; i++) {\n        if (this.hasValue(0)) {\n          this.generateTwoOrFour();\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n  }\n\n  generateTwoOrFour() {\n    const row = Math.floor(Math.random() * this.initialState.length);\n    const col = Math.floor(Math.random() * this.initialState[0].length);\n\n    const num = Math.random() < 0.9 ? 2 : 4;\n\n    if (this.initialState[row][col] === 0) {\n      this.initialState[row][col] = num;\n    } else {\n      this.generateTwoOrFour();\n    }\n  }\n\n  colorCells(board) {\n    for (let y = 0; y < this.initialState.length; y++) {\n      const row = board.rows[y];\n\n      for (let x = 0; x < this.initialState[0].length; x++) {\n        const cell = row.cells[x];\n\n        cell.className = cell.className\n          .split(' ')\n          .filter(className => !className.startsWith('field-cell--'))\n          .join(' ');\n\n        if (this.initialState[y][x] !== 0) {\n          cell.classList.add(`field-cell--${this.initialState[y][x]}`);\n          cell.textContent = `${this.initialState[y][x]}`;\n        } else {\n          cell.textContent = '';\n        }\n      }\n    }\n  }\n\n  hasValue(value) {\n    for (let y = 0; y < this.initialState.length; y++) {\n      for (let x = 0; x < this.initialState[y].length; x++) {\n        if (this.initialState[y][x] === value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","status","score","moveLeft","oldState","JSON","parse","stringify","y","length","x","numValue","index","hasValue","generateTwoOrFour","moveRight","moveUp","moveDown","getScore","getState","getStatus","up","down","right","left","start","every","row","item","i","restart","Math","floor","random","col","colorCells","board","rows","cell","cells","className","split","filter","startsWith","join","classList","add","textContent","value","$09e991522ca7e64e$var$page","document","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$board","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","addEventListener","event","preventDefault","contains","remove","blur","key","repeat"],"version":3,"file":"index.d47908cc.js.map"}